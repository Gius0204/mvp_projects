// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go_fiber/ent/predicate"
	"go_fiber/ent/task"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TaskUpdate) SetParentID(i int) *TaskUpdate {
	tu.mutation.SetParentID(i)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableParentID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetParentID(*i)
	}
	return tu
}

// ClearParentID clears the value of the "parent_id" field.
func (tu *TaskUpdate) ClearParentID() *TaskUpdate {
	tu.mutation.ClearParentID()
	return tu
}

// SetProgress sets the "progress" field.
func (tu *TaskUpdate) SetProgress(f float64) *TaskUpdate {
	tu.mutation.ResetProgress()
	tu.mutation.SetProgress(f)
	return tu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableProgress(f *float64) *TaskUpdate {
	if f != nil {
		tu.SetProgress(*f)
	}
	return tu
}

// AddProgress adds f to the "progress" field.
func (tu *TaskUpdate) AddProgress(f float64) *TaskUpdate {
	tu.mutation.AddProgress(f)
	return tu
}

// SetEstimatedTime sets the "estimated_time" field.
func (tu *TaskUpdate) SetEstimatedTime(i int) *TaskUpdate {
	tu.mutation.ResetEstimatedTime()
	tu.mutation.SetEstimatedTime(i)
	return tu
}

// SetNillableEstimatedTime sets the "estimated_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEstimatedTime(i *int) *TaskUpdate {
	if i != nil {
		tu.SetEstimatedTime(*i)
	}
	return tu
}

// AddEstimatedTime adds i to the "estimated_time" field.
func (tu *TaskUpdate) AddEstimatedTime(i int) *TaskUpdate {
	tu.mutation.AddEstimatedTime(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetParent sets the "parent" edge to the Task entity.
func (tu *TaskUpdate) SetParent(t *Task) *TaskUpdate {
	return tu.SetParentID(t.ID)
}

// AddSubtaskIDs adds the "subtasks" edge to the Task entity by IDs.
func (tu *TaskUpdate) AddSubtaskIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddSubtaskIDs(ids...)
	return tu
}

// AddSubtasks adds the "subtasks" edges to the Task entity.
func (tu *TaskUpdate) AddSubtasks(t ...*Task) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddSubtaskIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearParent clears the "parent" edge to the Task entity.
func (tu *TaskUpdate) ClearParent() *TaskUpdate {
	tu.mutation.ClearParent()
	return tu
}

// ClearSubtasks clears all "subtasks" edges to the Task entity.
func (tu *TaskUpdate) ClearSubtasks() *TaskUpdate {
	tu.mutation.ClearSubtasks()
	return tu
}

// RemoveSubtaskIDs removes the "subtasks" edge to Task entities by IDs.
func (tu *TaskUpdate) RemoveSubtaskIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveSubtaskIDs(ids...)
	return tu
}

// RemoveSubtasks removes "subtasks" edges to Task entities.
func (tu *TaskUpdate) RemoveSubtasks(t ...*Task) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveSubtaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Progress(); ok {
		_spec.SetField(task.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedProgress(); ok {
		_spec.AddField(task.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.EstimatedTime(); ok {
		_spec.SetField(task.FieldEstimatedTime, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedEstimatedTime(); ok {
		_spec.AddField(task.FieldEstimatedTime, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !tu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetParentID sets the "parent_id" field.
func (tuo *TaskUpdateOne) SetParentID(i int) *TaskUpdateOne {
	tuo.mutation.SetParentID(i)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableParentID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetParentID(*i)
	}
	return tuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tuo *TaskUpdateOne) ClearParentID() *TaskUpdateOne {
	tuo.mutation.ClearParentID()
	return tuo
}

// SetProgress sets the "progress" field.
func (tuo *TaskUpdateOne) SetProgress(f float64) *TaskUpdateOne {
	tuo.mutation.ResetProgress()
	tuo.mutation.SetProgress(f)
	return tuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProgress(f *float64) *TaskUpdateOne {
	if f != nil {
		tuo.SetProgress(*f)
	}
	return tuo
}

// AddProgress adds f to the "progress" field.
func (tuo *TaskUpdateOne) AddProgress(f float64) *TaskUpdateOne {
	tuo.mutation.AddProgress(f)
	return tuo
}

// SetEstimatedTime sets the "estimated_time" field.
func (tuo *TaskUpdateOne) SetEstimatedTime(i int) *TaskUpdateOne {
	tuo.mutation.ResetEstimatedTime()
	tuo.mutation.SetEstimatedTime(i)
	return tuo
}

// SetNillableEstimatedTime sets the "estimated_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEstimatedTime(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetEstimatedTime(*i)
	}
	return tuo
}

// AddEstimatedTime adds i to the "estimated_time" field.
func (tuo *TaskUpdateOne) AddEstimatedTime(i int) *TaskUpdateOne {
	tuo.mutation.AddEstimatedTime(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetParent sets the "parent" edge to the Task entity.
func (tuo *TaskUpdateOne) SetParent(t *Task) *TaskUpdateOne {
	return tuo.SetParentID(t.ID)
}

// AddSubtaskIDs adds the "subtasks" edge to the Task entity by IDs.
func (tuo *TaskUpdateOne) AddSubtaskIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddSubtaskIDs(ids...)
	return tuo
}

// AddSubtasks adds the "subtasks" edges to the Task entity.
func (tuo *TaskUpdateOne) AddSubtasks(t ...*Task) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddSubtaskIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearParent clears the "parent" edge to the Task entity.
func (tuo *TaskUpdateOne) ClearParent() *TaskUpdateOne {
	tuo.mutation.ClearParent()
	return tuo
}

// ClearSubtasks clears all "subtasks" edges to the Task entity.
func (tuo *TaskUpdateOne) ClearSubtasks() *TaskUpdateOne {
	tuo.mutation.ClearSubtasks()
	return tuo
}

// RemoveSubtaskIDs removes the "subtasks" edge to Task entities by IDs.
func (tuo *TaskUpdateOne) RemoveSubtaskIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveSubtaskIDs(ids...)
	return tuo
}

// RemoveSubtasks removes "subtasks" edges to Task entities.
func (tuo *TaskUpdateOne) RemoveSubtasks(t ...*Task) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveSubtaskIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Progress(); ok {
		_spec.SetField(task.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedProgress(); ok {
		_spec.AddField(task.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.EstimatedTime(); ok {
		_spec.SetField(task.FieldEstimatedTime, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedEstimatedTime(); ok {
		_spec.AddField(task.FieldEstimatedTime, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !tuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
